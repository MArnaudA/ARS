if (k>t){
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
l=c(l,count)
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
count=0
for (t in e){
if (k>t){
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
l_ranking=c(l_ranking,list(l))
View(l_ranking)
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
resultat
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
print('gg')
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
print('gg')
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
prin("ee")
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
e=similarity(communaute,method =si)[sommet_cible_id, ]
View(e)
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1
print('gg')
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
print("ee")
e=similarity(communaute,method =si)[sommet_cible_id, ]
print(e)
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
similarity.jaccard(gi)[1,]
similarity(gi,method ="jaccard")
similarity(gi,method ="jaccard")[1,]
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
communaute=gi
similarity =('jaccard')
sommet_candidat = resultat
sommet_cible = 1448859
print('gg')
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
print("ee")
e=similarity(communaute,method =si)[sommet_cible_id, ]
print(e)
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
if (k %in% sommet_candidat){
print("k")
print(k)
count=0
for (t in e){
if (k>t && t%in% sommet_candidat){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1)
### retourne les id ( et non pas les wki id) des sommets candidats
sommet_candidat<-function(communaute=gi, sommet_cible=1448859){
communaute=gi
sommet_cible=1448859
ensemble_sommet_voisin= neighbors(communaute, v = id_from_wikiid(sommet_cible, communaute))
ensemble_sommet_voisin
ensemble_sommet= V(gi)
ensemble_sommet
class(ensemble_sommet)
resultat <- setdiff(ensemble_sommet,ensemble_sommet_voisin)
resultat
return (resultat)
}
communaute=gi
sommet_cible=1448859
ensemble_sommet_voisin= neighbors(communaute, v = id_from_wikiid(sommet_cible, communaute))
ensemble_sommet_voisin
borda_liste=c(4,3,5,2)
resultat <- setdiff(borda_liste,ensemble_sommet_voisin)
resultat
### retourne les id ( et non pas les wki id) des sommets candidats
sommet_candidat<-function(communaute=gi, sommet_cible=1448859, borda_liste){
communaute=gi
sommet_cible=1448859
ensemble_sommet_voisin= neighbors(communaute, v = id_from_wikiid(sommet_cible, communaute))
ensemble_sommet_voisin
resultat <- setdiff(borda_liste,ensemble_sommet_voisin)
resultat
return (resultat)
}
V(gi)[4]
V(gi)
gi[1]$wikiid
gi[[1]]$wikiid
for(k in 1:2){
print(k)
}
### LEs similarité doivent donner des matrices
BORDA_ER=function(communaute, similarity, sommet_cible, sommet_candidat){
l_ranking=c()
a=0
sommet_cible_id=id_from_wikiid(sommet_cible, gi)
for (si in similarity){
e=similarity(communaute,method =si)[sommet_cible_id, ]
a=similarity(communaute, method=si)[sommet_cible_id, ]
l=c()
for (k in e){
count=0
for (t in e){
if (k>t){
print(t)
count=count+1
}
}
l=c(l,count)
}
l_ranking=c(l_ranking,list(l))
}
L_rank=c()
a=length(a)
for (k in 1:a){
L_sum=0
for (l in l_ranking){
L_sum=L_sum+ l[k]
}
L_rank=c(L_rank,L_sum)
}
return(order(L_rank, decreasing = TRUE)) # renvoie la position de l'indice
}
### retourne les id ( et non pas les wki id) des sommets candidats
sommet_candidat<-function(communaute, sommet_cible, borda_liste){
ensemble_sommet_voisin= neighbors(communaute, v = id_from_wikiid(sommet_cible, communaute))
ensemble_sommet_voisin
resultat <- setdiff(borda_liste,ensemble_sommet_voisin)
resultat
return (resultat)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
ajout_lien<- function(graph_rajout, communaute, similarity, sommet_cible, nb_ajout){ ## le sommet cible est le wiki_id du sommet
## nb-ajout pour le nombre de lien à rajouter
### Bordas/similarite
# ON recupere la liste des sommets(leur id) de la communaute classé selon leur similarite avec le sommet cible
Bordas=BORDA_ER(communaute, similarity, sommet_cible)
## Sommet candidat
# on recupere la liste des sommets candidats en enlevant les sommets non candidats de Bordas (on garde l'ordre)
L=sommet_candidat(communaute, sommet_cible, Borda)
## ajout de lien
for(k in 1:nb_ajout){
graphe_rajout <- add_edges(graphe_rajout, c(id_from_wikiid(sommet_cible, graphe_rajout), id_from_wikiid(V(graph_rajout)$wikiid[L[k]], graphe_rajout)))
}
return(graphe_rajout)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
ajout_lien<- function(graph_rajout, communaute, similarity, sommet_cible, nb_ajout){ ## le sommet cible est le wiki_id du sommet
## nb-ajout pour le nombre de lien à rajouter
### Bordas/similarite
# ON recupere la liste des sommets(leur id) de la communaute classé selon leur similarite avec le sommet cible
Bordas=BORDA_ER(communaute, similarity, sommet_cible)
## Sommet candidat
# on recupere la liste des sommets candidats en enlevant les sommets non candidats de Bordas (on garde l'ordre)
L=sommet_candidat(communaute, sommet_cible, Bordas)
## ajout de lien
for(k in 1:nb_ajout){
graphe_rajout <- add_edges(graphe_rajout, c(id_from_wikiid(sommet_cible, graphe_rajout), id_from_wikiid(V(graph_rajout)$wikiid[L[k]], graphe_rajout)))
}
return(graphe_rajout)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
ajout_lien<- function(graph_rajout, communaute, similarity, sommet_cible, nb_ajout){ ## le sommet cible est le wiki_id du sommet
## nb-ajout pour le nombre de lien à rajouter
### Bordas/similarite
# ON recupere la liste des sommets(leur id) de la communaute classé selon leur similarite avec le sommet cible
Bordas=BORDA_ER(communaute, similarity, sommet_cible)
## Sommet candidat
# on recupere la liste des sommets candidats en enlevant les sommets non candidats de Bordas (on garde l'ordre)
L=sommet_candidat(communaute, sommet_cible, Bordas)
## ajout de lien
for(k in 1:nb_ajout){
graph_rajout <- add_edges(graph_rajout, c(id_from_wikiid(sommet_cible, graph_rajout), id_from_wikiid(V(graph_rajout)$wikiid[L[k]], communaute)))
}
return(graphe_rajout)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
ajout_lien<- function(graph_rajout, communaute, similarity, sommet_cible, nb_ajout){ ## le sommet cible est le wiki_id du sommet
## nb-ajout pour le nombre de lien à rajouter
### Bordas/similarite
# ON recupere la liste des sommets(leur id) de la communaute classé selon leur similarite avec le sommet cible
Bordas=BORDA_ER(communaute, similarity, sommet_cible)
## Sommet candidat
# on recupere la liste des sommets candidats en enlevant les sommets non candidats de Bordas (on garde l'ordre)
L=sommet_candidat(communaute, sommet_cible, Bordas)
## ajout de lien
for(k in 1:nb_ajout){
graph_rajout <- add_edges(graph_rajout, c(id_from_wikiid(sommet_cible, graph_rajout), id_from_wikiid(V(graph_rajout)$wikiid[L[k]], communaute)))
}
return(graph_rajout)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
gii
gi=induced.subgraph(g1,ego_ids_R)
gi
plot.igraph(induced.subgraph(g1,ego_ids_R))
plot.igraph(gi)
plot.igraph(gi)
(gii)
plot.igraph(gii)
oo=BORDA_ER(gi, similarity =('jaccard'), sommet_candidat = resultat, sommet_cible = 1448859)
oo
ajout_lien<- function(graph_rajout, communaute, similarity, sommet_cible, nb_ajout){ ## le sommet cible est le wiki_id du sommet
## nb-ajout pour le nombre de lien à rajouter
### Bordas/similarite
# ON recupere la liste des sommets(leur id) de la communaute classé selon leur similarite avec le sommet cible
Bordas=BORDA_ER(communaute, similarity, sommet_cible)
## Sommet candidat
# on recupere la liste des sommets candidats en enlevant les sommets non candidats de Bordas (on garde l'ordre)
L=sommet_candidat(communaute, sommet_cible, Bordas)
## ajout de lien
for(k in 1:nb_ajout){
graph_rajout <- add_edges(graph_rajout, c(id_from_wikiid(sommet_cible, graph_rajout), id_from_wikiid(V(graph_rajout)$wikiid[L[k+1]], communaute)))
}
return(graph_rajout)
}
gii=ajout_lien(gi, gi,similarity =('jaccard'), 1448859, 1)
gii
gi=induced.subgraph(g1,ego_ids_R)
gi
plot.igraph(gi)
plot.igraph(gii)
